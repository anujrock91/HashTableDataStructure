package Snippet;
import java.util.Stack;

public class MaximalAreaRectangle {
	
	
	public int getMaxArea(int []nums){
		int index = 0;
		Stack<Integer> s = new Stack<>();
		int max = Integer.MIN_VALUE;
		for(index=0;index<nums.length;index++){
			int area = 0;
			int num = nums[index];
			//If empty stack
			if(s.isEmpty()){ s.push(index); }
			else{
				if(num > nums[s.peek()]){
					s.push(index);
				}
				else if(num < nums[s.peek()]){
					//Till we find an element less than current
					while(!s.isEmpty() && nums[s.peek()]>=num ){
						int temp = s.pop();
						//If this was the last element in stack
						if(s.isEmpty()){
							area = (nums[temp]*index);
							max = Math.max(max, area);
						}
						//if there are still elements left in stack
						else{
							area = (nums[temp]*(index-s.peek()-1));
							max = Math.max(area, max);
						}
					}
					s.push(index);
				}//End of else if
				//if two elements are equal
				else{
					continue; 
				}
			}//end of main else
		}
		
		while(!s.isEmpty()){
			int area = 0; 
			int temp = s.pop();
			if(s.isEmpty()){
				area = (index*nums[temp]);
				max = Math.max(max, area);
			}
			else{
				nums[temp]*(index-nums[s.peek()]-1);
			}
		}
		
		return max;
	}
	
	
	public static void main(String args[]){
		System.out.println(new MaximalAreaRectangle().getMaxArea(new int[]{0,3,1,1,1}));
	}
}
