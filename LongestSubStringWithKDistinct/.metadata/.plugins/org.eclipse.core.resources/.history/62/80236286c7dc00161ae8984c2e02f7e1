package Snippet;
import java.util.HashMap;

public class LongestSubStringK {
	
	public int lengthOfLongestSubstringKDistinct(String s, int k){
		HashMap<Character, Integer> charCount = new HashMap<>();
		int length = Integer.MIN_VALUE;
		int left  = 0;
		int right = 0;
		while(right < s.length()){
			char c = s.charAt(right);
			if(charCount.size()==k){
				if(charCount.containsKey(c)){
					charCount.put(c, charCount.getOrDefault(c, 0)+1);
					length = Math.max(length, right-left+1);
					++right;
				}
				else{
					c = s.charAt(left);
					charCount.put(c, charCount.getOrDefault(c, 0)-1);
					if(charCount.get(c) == 0){ charCount.remove(c); }
					++left;
				}
			}
			else{
				charCount.put(c, charCount.getOrDefault(c, 0)+1);
				length = Math.max(length, (right-left+1));
				++right;
			}
		}
		return length;
	}
	
	
	public static void main(String args[]){
		System.out.println(new LongestSubStringK().lengthOfLongestSubstringKDistinct("cadcacacaca",4));
	}
	
	
}
