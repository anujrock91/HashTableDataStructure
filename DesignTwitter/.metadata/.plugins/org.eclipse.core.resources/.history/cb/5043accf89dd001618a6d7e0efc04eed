package Snippet;
import java.util.*;
import java.util.Map.Entry;


class Tweet{
	public int tweetId;
	public int timeStamp;
}


class UserActivity{
	private ArrayList<Tweet> orderTweets;
	private HashSet<Integer> follows;
	int order = 0;
	public UserActivity(int userId){
		orderTweets = new ArrayList<>();
		follows = new HashSet<>();
		follows.add(userId);
	}
	public void addFollower(int userId){
		follows.add(userId);
	}
	public boolean removeFollower(int userId){
		boolean decision = (follows.contains(userId))?follows.remove(userId):follows.contains(userId);
		return decision;
	}
	public void addTweet(int timeStamp, int tweetId){
		Tweet obj = new Tweet();
		order = timeStamp;
		obj.timeStamp = order;
		obj.tweetId = tweetId;
		orderTweets.add(obj);
	}
	public HashSet<Integer> getUserFollowUps(){
		return (HashSet<Integer>) follows.clone();
	}
	public ArrayList<Tweet> getUserTweetStream(){
		return (ArrayList<Tweet>) orderTweets.clone();
	}
}


public class Twitter {
	private HashMap<Integer, UserActivity> userInfo;
    private int timeStamp = 0;
	/** Initialize your data structure here. */
    public Twitter() {
    	userInfo = new HashMap<>();
    }
    
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        ++timeStamp;
    	if(userInfo.containsKey(userId)){
        	userInfo.get(userId).addTweet(timeStamp, tweetId);
        }
        else{
        	UserActivity obj = new UserActivity(userId);
        	obj.addTweet(timeStamp, tweetId);
        	userInfo.put(userId, obj);
        }
    }
    
    
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
    	if(!userInfo.containsKey(userId)){ return new ArrayList<Integer>(); }
    	
    	//A list of all user follow ups including self
    	HashSet<Integer> userFollows = userInfo.get(userId).getUserFollowUps();
    	
    	PriorityQueue<Tweet> que = new PriorityQueue<>(new Comparator<Tweet>() {
			@Override
			public int compare(Tweet o1, Tweet o2) {
				return o1.timeStamp-o2.timeStamp;
			}
		});
    	
    	//For each user
    	for(Integer user: userFollows){
    		UserActivity tempObj = userInfo.get(user);
    		ArrayList<Tweet> orderPost = tempObj.getUserTweetStream();
    		if(orderPost.size() == 0){ continue; }
    		//For each tweet from the user
    		for(int i=orderPost.size()-1; i>=0;i--){
    			Tweet t = orderPost.get(i);
    			if(que.size()<10){ que.add(t); }
    			else{
    				if(t.timeStamp < que.peek().timeStamp){ break; }
    				else{ 
    					que.poll();
    					que.add(t);
    				}
    			}
    		}
    	}
    	
    	ArrayList<Integer> ids = new ArrayList<>();
    	while(!que.isEmpty()){
    		ids.add(que.poll().tweetId);
    	}
    	return ids;
    	
    }
    
    
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        if(userInfo.containsKey(followerId)){
        	userInfo.get(followerId).addFollower(followeeId);
        }
        else{
        	UserActivity obj = new UserActivity(followerId);
        	obj.addFollower(followeeId);
        	userInfo.put(followerId, obj);
        }
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        if(userInfo.containsKey(followerId)){
        	userInfo.get(followerId).removeFollower(followeeId);
        }
    }
    
    
    
    
    
    public static void main(String args[]){
    	Twitter obj = new Twitter();
    	obj.postTweet(1, 11);
    	obj.postTweet(2, 21);
    	obj.postTweet(3, 31);
    	obj.postTweet(4, 41);
    }
    
    
    
    
    
}

